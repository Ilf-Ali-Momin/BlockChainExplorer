{"id":"f0b088f1ccec0dedcb950ca9ec3ad216","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n contract SimpleStorage{\n\n    uint256 myfavoriteNumber;\n    // uint256[] ListOfFavoriteNumber;\n\n    struct Person{\n        uint256 favoriteNumber;\n        string name;\n    \n\n    }\n    Person [] public listOfPeople;\n    // Person public You = Person({favoriteNumber:19,name:\"Ilf Momin \",age:20,metamask:0xDd89B3074B601B9Ea62160350F3234A6D2B72F38});\n    // Person public Me = Person({favoriteNumber:19,name:\"Ilf Momin \",age:20,metamask:0xDd89B3074B601B9Ea62160350F3234A6D2B72F38});\n    // Person public Who = Person({favoriteNumber:19,name:\"Ilf Momin \",age:20,metamask:0xDd89B3074B601B9Ea62160350F3234A6D2B72F38});\n\n\n    //Ali -> 20\n    mapping(string => uint256) public nameToFavoriteNumber;\n\n    function store(uint256 _favoriteNumber)public{\n        myfavoriteNumber = _favoriteNumber;\n        \n    }\n    function retrieve() public view returns (uint256) {\n        return myfavoriteNumber;\n    }\n    function addPerson(string memory _name, uint256 _favoriteNumber)public{\n        // Person memory newPerson = Person( _favoriteNumber, _name);\n        // listOfPeople.push(newPerson);\n        listOfPeople.push(Person(_favoriteNumber,_name));\n        nameToFavoriteNumber[_name]= _favoriteNumber;\n \n\n    }\n }\n contract SimpleStorage2{}\n contract SimpleStorage3{}"},"contracts/StorageFactory.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n import {SimpleStorage, SimpleStorage2} from \"./SimpleStorage.sol\";\n\ncontract StorageFactory{\n\n    SimpleStorage[] public ListOfSimpleStorageContracts;\n\n    function createSimpleStorageContract() public {\n            SimpleStorage newSimpleStorageContract = new SimpleStorage();\n            ListOfSimpleStorageContracts.push(newSimpleStorageContract);\n\n    }\n    function sfStore(uint256 _simpleStorageIndex, uint256 _newSimpleStorageNumber )public{\n        //ABI\n        //Address\n        SimpleStorage mySimpleStorage = ListOfSimpleStorageContracts[_simpleStorageIndex];\n        mySimpleStorage.store(_newSimpleStorageNumber);\n\n    }\n    function sfGet(uint256 _simpleStorageIndex) public view returns(uint256 ){\n                SimpleStorage mySimpleStorage = ListOfSimpleStorageContracts[_simpleStorageIndex];\n                return mySimpleStorage.retrieve();\n\n    }\n \n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[58],"SimpleStorage2":[59],"SimpleStorage3":[60]},"id":61,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":58,"linearizedBaseContracts":[58],"name":"SimpleStorage","nameLocation":"67:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"myfavoriteNumber","nameLocation":"95:16:0","nodeType":"VariableDeclaration","scope":58,"src":"87:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"87:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"SimpleStorage.Person","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favoriteNumber","nameLocation":"188:14:0","nodeType":"VariableDeclaration","scope":8,"src":"180:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"180:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"219:4:0","nodeType":"VariableDeclaration","scope":8,"src":"212:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"212:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Person","nameLocation":"164:6:0","nodeType":"StructDefinition","scope":58,"src":"157:79:0","visibility":"public"},{"constant":false,"functionSelector":"2ebce631","id":12,"mutability":"mutable","name":"listOfPeople","nameLocation":"258:12:0","nodeType":"VariableDeclaration","scope":58,"src":"241:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"Person","nameLocations":["241:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"241:6:0"},"referencedDeclaration":8,"src":"241:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":11,"nodeType":"ArrayTypeName","src":"241:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"public"},{"constant":false,"functionSelector":"8bab8dd5","id":16,"mutability":"mutable","name":"nameToFavoriteNumber","nameLocation":"726:20:0","nodeType":"VariableDeclaration","scope":58,"src":"692:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"700:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"692:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"710:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":25,"nodeType":"Block","src":"798:60:0","statements":[{"expression":{"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21,"name":"myfavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"808:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":22,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"827:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"808:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":24,"nodeType":"ExpressionStatement","src":"808:34:0"}]},"functionSelector":"6057361d","id":26,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"762:5:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"776:15:0","nodeType":"VariableDeclaration","scope":26,"src":"768:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:25:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"798:0:0"},"scope":58,"src":"753:105:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":33,"nodeType":"Block","src":"913:40:0","statements":[{"expression":{"id":31,"name":"myfavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"930:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":30,"id":32,"nodeType":"Return","src":"923:23:0"}]},"functionSelector":"2e64cec1","id":34,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"872:8:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"880:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"904:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"903:9:0"},"scope":58,"src":"863:90:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":56,"nodeType":"Block","src":"1028:233:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":45,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1174:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":46,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1190:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":44,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1167:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$8_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1167:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$8_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":41,"name":"listOfPeople","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"1149:12:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1162:4:0","memberName":"push","nodeType":"MemberAccess","src":"1149:17:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$_t_struct$_Person_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"1149:48:0"},{"expression":{"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":50,"name":"nameToFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1207:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":52,"indexExpression":{"id":51,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"1228:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1207:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":53,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1236:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1207:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":55,"nodeType":"ExpressionStatement","src":"1207:44:0"}]},"functionSelector":"6f760f41","id":57,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"967:9:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_name","nameLocation":"991:5:0","nodeType":"VariableDeclaration","scope":57,"src":"977:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":35,"name":"string","nodeType":"ElementaryTypeName","src":"977:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"1006:15:0","nodeType":"VariableDeclaration","scope":57,"src":"998:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"998:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"976:46:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"1028:0:0"},"scope":58,"src":"958:303:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":61,"src":"58:1206:0","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage2","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":59,"linearizedBaseContracts":[59],"name":"SimpleStorage2","nameLocation":"1275:14:0","nodeType":"ContractDefinition","nodes":[],"scope":61,"src":"1266:25:0","usedErrors":[],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage3","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":60,"linearizedBaseContracts":[60],"name":"SimpleStorage3","nameLocation":"1302:14:0","nodeType":"ContractDefinition","nodes":[],"scope":61,"src":"1293:25:0","usedErrors":[],"usedEvents":[]}],"src":"32:1286:0"}},"contracts/StorageFactory.sol":{"id":1,"ast":{"absolutePath":"contracts/StorageFactory.sol","exportedSymbols":{"SimpleStorage":[58],"SimpleStorage2":[59],"StorageFactory":[128]},"id":129,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":62,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:1"},{"absolutePath":"contracts/SimpleStorage.sol","file":"./SimpleStorage.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":129,"sourceUnit":61,"src":"59:66:1","symbolAliases":[{"foreign":{"id":63,"name":"SimpleStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"67:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":64,"name":"SimpleStorage2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"82:14:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StorageFactory","contractDependencies":[58],"contractKind":"contract","fullyImplemented":true,"id":128,"linearizedBaseContracts":[128],"name":"StorageFactory","nameLocation":"136:14:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"cd0b4b23","id":69,"mutability":"mutable","name":"ListOfSimpleStorageContracts","nameLocation":"180:28:1","nodeType":"VariableDeclaration","scope":128,"src":"157:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[]"},"typeName":{"baseType":{"id":67,"nodeType":"UserDefinedTypeName","pathNode":{"id":66,"name":"SimpleStorage","nameLocations":["157:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"157:13:1"},"referencedDeclaration":58,"src":"157:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"id":68,"nodeType":"ArrayTypeName","src":"157:15:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr","typeString":"contract SimpleStorage[]"}},"visibility":"public"},{"body":{"id":86,"nodeType":"Block","src":"261:155:1","statements":[{"assignments":[74],"declarations":[{"constant":false,"id":74,"mutability":"mutable","name":"newSimpleStorageContract","nameLocation":"289:24:1","nodeType":"VariableDeclaration","scope":86,"src":"275:38:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"},"typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"SimpleStorage","nameLocations":["275:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"275:13:1"},"referencedDeclaration":58,"src":"275:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"visibility":"internal"}],"id":79,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"316:17:1","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_SimpleStorage_$58_$","typeString":"function () returns (contract SimpleStorage)"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"SimpleStorage","nameLocations":["320:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"320:13:1"},"referencedDeclaration":58,"src":"320:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"316:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"nodeType":"VariableDeclarationStatement","src":"275:60:1"},{"expression":{"arguments":[{"id":83,"name":"newSimpleStorageContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"383:24:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}],"expression":{"id":80,"name":"ListOfSimpleStorageContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"349:28:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[] storage ref"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"378:4:1","memberName":"push","nodeType":"MemberAccess","src":"349:33:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr_$_t_contract$_SimpleStorage_$58_$returns$__$attached_to$_t_array$_t_contract$_SimpleStorage_$58_$dyn_storage_ptr_$","typeString":"function (contract SimpleStorage[] storage pointer,contract SimpleStorage)"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"349:59:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"349:59:1"}]},"functionSelector":"1dda6541","id":87,"implemented":true,"kind":"function","modifiers":[],"name":"createSimpleStorageContract","nameLocation":"224:27:1","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"251:2:1"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"261:0:1"},"scope":128,"src":"215:201:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":107,"nodeType":"Block","src":"506:187:1","statements":[{"assignments":[96],"declarations":[{"constant":false,"id":96,"mutability":"mutable","name":"mySimpleStorage","nameLocation":"562:15:1","nodeType":"VariableDeclaration","scope":107,"src":"548:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"},"typeName":{"id":95,"nodeType":"UserDefinedTypeName","pathNode":{"id":94,"name":"SimpleStorage","nameLocations":["548:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"548:13:1"},"referencedDeclaration":58,"src":"548:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"visibility":"internal"}],"id":100,"initialValue":{"baseExpression":{"id":97,"name":"ListOfSimpleStorageContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"580:28:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[] storage ref"}},"id":99,"indexExpression":{"id":98,"name":"_simpleStorageIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"609:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"580:49:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"nodeType":"VariableDeclarationStatement","src":"548:81:1"},{"expression":{"arguments":[{"id":104,"name":"_newSimpleStorageNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"661:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":101,"name":"mySimpleStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"639:15:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"655:5:1","memberName":"store","nodeType":"MemberAccess","referencedDeclaration":26,"src":"639:21:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"639:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":106,"nodeType":"ExpressionStatement","src":"639:46:1"}]},"functionSelector":"1563700f","id":108,"implemented":true,"kind":"function","modifiers":[],"name":"sfStore","nameLocation":"430:7:1","nodeType":"FunctionDefinition","parameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"_simpleStorageIndex","nameLocation":"446:19:1","nodeType":"VariableDeclaration","scope":108,"src":"438:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":88,"name":"uint256","nodeType":"ElementaryTypeName","src":"438:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":91,"mutability":"mutable","name":"_newSimpleStorageNumber","nameLocation":"475:23:1","nodeType":"VariableDeclaration","scope":108,"src":"467:31:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":90,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"437:63:1"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[],"src":"506:0:1"},"scope":128,"src":"421:272:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":126,"nodeType":"Block","src":"771:158:1","statements":[{"assignments":[117],"declarations":[{"constant":false,"id":117,"mutability":"mutable","name":"mySimpleStorage","nameLocation":"803:15:1","nodeType":"VariableDeclaration","scope":126,"src":"789:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"},"typeName":{"id":116,"nodeType":"UserDefinedTypeName","pathNode":{"id":115,"name":"SimpleStorage","nameLocations":["789:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"789:13:1"},"referencedDeclaration":58,"src":"789:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"visibility":"internal"}],"id":121,"initialValue":{"baseExpression":{"id":118,"name":"ListOfSimpleStorageContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"821:28:1","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_SimpleStorage_$58_$dyn_storage","typeString":"contract SimpleStorage[] storage ref"}},"id":120,"indexExpression":{"id":119,"name":"_simpleStorageIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"850:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"821:49:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"nodeType":"VariableDeclarationStatement","src":"789:81:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":122,"name":"mySimpleStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"895:15:1","typeDescriptions":{"typeIdentifier":"t_contract$_SimpleStorage_$58","typeString":"contract SimpleStorage"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"911:8:1","memberName":"retrieve","nodeType":"MemberAccess","referencedDeclaration":34,"src":"895:24:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"895:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":114,"id":125,"nodeType":"Return","src":"888:33:1"}]},"functionSelector":"c5f19c20","id":127,"implemented":true,"kind":"function","modifiers":[],"name":"sfGet","nameLocation":"707:5:1","nodeType":"FunctionDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"_simpleStorageIndex","nameLocation":"721:19:1","nodeType":"VariableDeclaration","scope":127,"src":"713:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"712:29:1"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":127,"src":"762:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"761:10:1"},"scope":128,"src":"698:231:1","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":129,"src":"127:806:1","usedErrors":[],"usedEvents":[]}],"src":"33:900:1"}}},"contracts":{"contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"listOfPeople","outputs":[{"internalType":"uint256","name":"favoriteNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToFavoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfPeople\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoriteNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xbafbcba957d53e07169578f2f9235a482032400d5c4172a44fc2a90edfeabde5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9762feb772bd102dc5405291f2f67741f9f788a549f01ade9a67607280ae95b2\",\"dweb:/ipfs/Qma55tn38eryKdH6AzEHTskfNAu5mdiuMSohhnrRU1BZw4\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_28\n\tsub.s!\t@CPI0_4[0], r3, r5\n\tjump.eq\t@.BB0_31\n\tsub.s!\t@CPI0_5[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_8[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_14[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tadd\t@CPI0_13[0], r4, r4\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tsub!\tr3, r5, r5\n\tjump.eq\t@.BB0_19\n.BB0_17:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_28:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_8[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_10[0], r3, r7\n\tjump.ge\t@.BB0_36\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_11[0], r7, r8\n\tjump.le\t@.BB0_38\n.BB0_36:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_11:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_18[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tsload\tr4, r4\n\tadd\tr4, r0, stack-[8]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_21\n\tadd\tr6, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_25\n\tadd\t160, r0, r1\n\tjump\t@.BB0_20\n.BB0_38:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_39\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_20:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[7]\n\tadd\t32, r4, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[8], r0, r1\n\tst.1\tr4, r1\n\tadd\t64, r4, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr1, r3\n\tadd\t96, r4, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[7], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_39:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r7\n.BB0_41:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_41\n.BB0_69:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_43\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_43:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.gt\t@.BB0_36\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r5, r2\n\tst.1\tr2, r4\n\tadd\t1, r0, r6\n\tsload\tr6, r3\n\tsub.s!\t@CPI0_8[0], r3, r4\n\tjump.gt\t@.BB0_36\n\tadd\t1, r3, r4\n\tsstore\tr6, r4\n\tst.1\t0, r6\n\tld.1\tr1, r1\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_13[0], r3, r4\n\tsstore\tr4, r1\n\tadd\t@CPI0_14[0], r3, r3\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r4, r8\n\tsub.s!\t@CPI0_8[0], r4, r1\n\tjump.gt\t@.BB0_36\n\tsload\tr3, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r9\n\tadd.ne\tr2, r0, r9\n\tsub.s!\t31, r9, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_17\n\tadd\tr8, r0, stack-[1]\n\tadd\tr7, r0, stack-[2]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr3, r0, stack-[7]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr9, r0, stack-[3]\n\tsub.s!\t32, r9, r1\n\tjump.lt\t@.BB0_51\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_51\n.BB0_52:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_52\n.BB0_51:\n\tadd\tstack-[8], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_62\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[8], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_57\n\tadd\t32, r0, r2\n\tjump\t@.BB0_59\n.BB0_25:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_26:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_26\n\tadd\t192, r2, r1\n\tjump\t@.BB0_20\n.BB0_62:\n\tsub!\tstack-[8], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_64\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_64:\n\tadd\tstack-[8], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[6]\n\tjump\t@.BB0_53\n.BB0_57:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_58:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_58\n.BB0_59:\n\tsub.s!\tstack-[8], r3, r3\n\tjump.ge\t@.BB0_61\n\tadd\tstack-[8], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_61:\n\tadd\tstack-[8], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_53:\n\tor\tstack-[6], r1, r1\n\tadd\tstack-[7], r0, r2\n\tsstore\tr2, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_decode_string:\n.func_begin3:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI3_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI3_0[0], r2, r6\n\tand\t@CPI3_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI3_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB3_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI3_1[0], r4, r1\n\tjump.ge\t@.BB3_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI3_2[0], r5, r8\n\tjump.gt\t@.BB3_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB3_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB3_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB3_12\n\tadd\tr0, r0, r7\n.BB3_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB3_9\n.BB3_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB3_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB3_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB3_3:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1616328220\nCPI0_3:\n\t.cell 1616328221\nCPI0_4:\n\t.cell 1870008129\nCPI0_5:\n\t.cell 2343275989\nCPI0_6:\n\t.cell 778358465\nCPI0_7:\n\t.cell 784131633\nCPI0_8:\nCPI1_0:\nCPI3_2:\n\t.cell 18446744073709551615\nCPI0_9:\n\t.cell 2535301200456458802993406410752\nCPI0_10:\nCPI3_1:\n\t.cell 18446744073709551616\nCPI0_11:\n\t.cell 18446744073709551487\nCPI0_12:\n\t.cell 18446744073709551551\nCPI0_13:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_14:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_15:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_16:\nCPI1_1:\nCPI3_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_17:\nCPI1_2:\nCPI3_4:\n\t.cell 2852213850513516153367582212096\nCPI0_18:\n\t.cell 2535301202817642044428229017600\nCPI3_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","listOfPeople(uint256)":"2ebce631","nameToFavoriteNumber(string)":"8bab8dd5","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_58\" {\n    code {\n        {\n            /// @src 0:58:1264  \"contract SimpleStorage{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_58_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_58_deployed\" {\n        code {\n            {\n                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, sload(_4))\n                        return(_1, 32)\n                    }\n                    case 0x2ebce631 {\n                        if callvalue() { revert(_4, _4) }\n                        let _5 := 32\n                        if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _6 := 1\n                        /// @src 0:241:270  \"Person [] public listOfPeople\"\n                        if iszero(lt(value, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ sload(1)))\n                        /// @src 0:241:270  \"Person [] public listOfPeople\"\n                        {\n                            revert(/** @src 0:58:1264  \"contract SimpleStorage{...\" */ _4, _4)\n                        }\n                        /// @src 0:241:270  \"Person [] public listOfPeople\"\n                        let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        let _7 := sload(/** @src 0:241:270  \"Person [] public listOfPeople\" */ slot)\n                        let _8 := add(slot, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ 1)\n                        let memPtr := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(_8)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let updated_pos := add(memPtr, _5)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _5)\n                        }\n                        case 1 {\n                            mstore(_4, _8)\n                            let dataPos := keccak256(_4, _5)\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _5) }\n                            {\n                                mstore(add(add(memPtr, i), _5), sload(dataPos))\n                                dataPos := add(dataPos, _6)\n                            }\n                            ret := add(add(memPtr, i), _5)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_2)\n                        mstore(memPos, _7)\n                        mstore(add(memPos, _5), _2)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _2), length_1)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        sstore(_4, calldataload(_3))\n                        return(_4, _4)\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset_1 := calldataload(_3)\n                        let _9 := 0xffffffffffffffff\n                        if gt(offset_1, _9) { revert(_4, _4) }\n                        let value0 := abi_decode_string(add(_3, offset_1), calldatasize())\n                        let value_1 := calldataload(36)\n                        let memPtr_1 := mload(_2)\n                        let newFreePtr := add(memPtr_1, _2)\n                        if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr_1, value_1)\n                        let _10 := 32\n                        /// @src 0:1167:1196  \"Person(_favoriteNumber,_name)\"\n                        let _11 := add(memPtr_1, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ _10)\n                        mstore(_11, value0)\n                        let _12 := 1\n                        let oldLen := sload(_12)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        sstore(_12, add(oldLen, _12))\n                        let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_2\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 36)\n                        }\n                        sstore(slot_1, mload(memPtr_1))\n                        let memberSlot := add(slot_1, _12)\n                        let _13 := mload(_11)\n                        let newLen := mload(_13)\n                        if gt(newLen, _9)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _14 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_14, 31)\n                        {\n                            mstore(_4, memberSlot)\n                            let data := keccak256(_4, _10)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _10) { deleteStart := data }\n                            let _15 := add(data, shr(5, add(_14, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _15) { start := add(start, _12) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _10\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, memberSlot)\n                            let dstPtr := keccak256(_4, _10)\n                            let i_1 := _4\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                            {\n                                sstore(dstPtr, mload(add(_13, srcOffset)))\n                                dstPtr := add(dstPtr, _12)\n                                srcOffset := add(srcOffset, _10)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_13, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_12, newLen), _12))\n                        }\n                        default {\n                            let value_2 := _4\n                            if newLen\n                            {\n                                value_2 := mload(add(_13, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                        }\n                        let pos := mload(_2)\n                        let length_2 := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_2)\n                        let end := add(pos, length_2)\n                        mstore(end, /** @src 0:1207:1227  \"nameToFavoriteNumber\" */ 0x02)\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        sstore(keccak256(pos, add(sub(end, pos), _10)), value_1)\n                        return(_4, _4)\n                    }\n                    case 0x8bab8dd5 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let offset_3 := calldataload(_3)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset_3), calldatasize())\n                        let pos_1 := mload(_2)\n                        let length_3 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                        let end_1 := add(pos_1, length_3)\n                        mstore(end_1, /** @src 0:692:746  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _16)\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:241:270  \"Person [] public listOfPeople\" */ 1)))\n                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:241:270  \"Person [] public listOfPeople\" */ 1)\n                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:241:270  \"Person [] public listOfPeople\" */ 1, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:58:1264  \"contract SimpleStorage{...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                array := memPtr\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220dc49d4d04578b4b2d39b3360688c45e4fa3501164b21781aa90dcd9d7c8b138364736f6c63430008180033\"\n    }\n}\n","hash":"010000a15ce918ae1e78a5ff8c25c46924b02111e8f3b2b7d5864303af8b76eb","factoryDependencies":{}},"SimpleStorage2":{"abi":[],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xbafbcba957d53e07169578f2f9235a482032400d5c4172a44fc2a90edfeabde5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9762feb772bd102dc5405291f2f67741f9f788a549f01ade9a67607280ae95b2\",\"dweb:/ipfs/Qma55tn38eryKdH6AzEHTskfNAu5mdiuMSohhnrRU1BZw4\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage2\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000007e6683ee5b35e1537d107842870cc9ef5228316383e582635eae5b686eaf9cbc"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage2_59\" {\n    code {\n        {\n            /// @src 0:1266:1291  \"contract SimpleStorage2{}\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage2_59_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage2_59_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage2_59_deployed\" {\n        code {\n            {\n                /// @src 0:1266:1291  \"contract SimpleStorage2{}\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212206bd09f88fedba13741b5d51a6555f37af23086f43051428c161eab034f9bd02064736f6c63430008180033\"\n    }\n}\n","hash":"0100000713945379663837149921ed7616679d570a296007bb20c28dd7193388","factoryDependencies":{}},"SimpleStorage3":{"abi":[],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xbafbcba957d53e07169578f2f9235a482032400d5c4172a44fc2a90edfeabde5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9762feb772bd102dc5405291f2f67741f9f788a549f01ade9a67607280ae95b2\",\"dweb:/ipfs/Qma55tn38eryKdH6AzEHTskfNAu5mdiuMSohhnrRU1BZw4\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage3\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n","bytecode":{"object":"00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e00000010000104300000000000000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000871413ca0c3163393bec14c68b41a84b166920277bc80f9da68b547f7eb715a2"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage3_60\" {\n    code {\n        {\n            /// @src 0:1293:1318  \"contract SimpleStorage3{}\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage3_60_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage3_60_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage3_60_deployed\" {\n        code {\n            {\n                /// @src 0:1293:1318  \"contract SimpleStorage3{}\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ede3f19986dc3de69f78fc30c2265951c7945ac39d19b3263cae8b33b76de04a64736f6c63430008180033\"\n    }\n}\n","hash":"01000007825de4c7a3dc395f71fef3a890de4fafa6019d3045099156bc997a35","factoryDependencies":{}}},"contracts/StorageFactory.sol":{"StorageFactory":{"abi":[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"ListOfSimpleStorageContracts","outputs":[{"internalType":"contract SimpleStorage","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createSimpleStorageContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_simpleStorageIndex","type":"uint256"}],"name":"sfGet","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_simpleStorageIndex","type":"uint256"},{"internalType":"uint256","name":"_newSimpleStorageNumber","type":"uint256"}],"name":"sfStore","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ListOfSimpleStorageContracts\",\"outputs\":[{\"internalType\":\"contract SimpleStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSimpleStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_simpleStorageIndex\",\"type\":\"uint256\"}],\"name\":\"sfGet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_simpleStorageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSimpleStorageNumber\",\"type\":\"uint256\"}],\"name\":\"sfStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StorageFactory.sol\":\"StorageFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xbafbcba957d53e07169578f2f9235a482032400d5c4172a44fc2a90edfeabde5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9762feb772bd102dc5405291f2f67741f9f788a549f01ade9a67607280ae95b2\",\"dweb:/ipfs/Qma55tn38eryKdH6AzEHTskfNAu5mdiuMSohhnrRU1BZw4\"]},\"contracts/StorageFactory.sol\":{\"keccak256\":\"0x64a95fa639a06046fd6f225847242bc56655ad45a363acfbb552c9a5ff479905\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://86b317b92bf376b30ad150540b256d590c2b1f24ff37d664a32e4de83a116c9a\",\"dweb:/ipfs/QmdbfJi4LnWQrmWAgftJ9Jfn3KYEz6pRZ3FVrVrS4t4aPK\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"StorageFactory.sol:StorageFactory\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_13[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_14[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_29\n\tld\tr1, r3\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_33\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_34\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_40\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr1, r2, r2\n\tjump.ge\t@.BB0_2\n\tnear_call\tr0, @storage_array_index_access_contract_SimpleStorage_dyn, @DEFAULT_UNWIND\n\tshl.s\t3, r2, r2\n\tsload\tr1, r1\n\tshr\tr1, r2, r1\n\tand\t@CPI0_7[0], r1, r1\n\tsub.s!\t255, r2, r2\n\tadd.gt\tr0, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB0_13\n\tst.1\t0, r0\n\tadd\t@CPI0_9[0], r1, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_18[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_7[0], r1, r1\n\tadd\tr1, r0, stack-[1]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_16\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r5\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1\tr5, r1\n\tadd\t36, r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tadd\t4, r5, r2\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t4, r2, r3\n\tjump.eq\t@.BB0_25\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\tr5, r0, stack-[1]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r5\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_20\n.BB0_25:\n\tsub.s!\t@CPI0_21[0], r5, r1\n\tjump.ge\t@.BB0_26\n\tst.1\t64, r5\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_40:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB0_13\n\tst.1\t0, r0\n\tadd\t@CPI0_9[0], r1, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_10[0], r0, r1\n\tst.1\t128, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_7[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_45\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_55\n.BB0_13:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_34:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_61\n\tadd\tr0, r0, r6\n.BB0_36:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_36\n.BB0_61:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_38\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_38:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_33:\n\tsload\tr0, r1\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.le\t@.BB0_39\n.BB0_26:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_16:\n\trevert\n.BB0_45:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_11[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_63\n\tadd\tr0, r0, r7\n.BB0_47:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_47\n.BB0_63:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_49\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_49:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_50\n.BB0_55:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r2\n\tjump.ge\t@.BB0_54\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_54:\n\tld.1\t128, r2\n\tst.1\tr1, r2\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_8[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_39:\n\tadd\t1, r1, r2\n\tsstore\tr0, r2\n\tadd\tr3, r0, stack-[1]\n\tnear_call\tr0, @storage_array_index_access_contract_SimpleStorage_dyn, @DEFAULT_UNWIND\n\tshl.s\t3, r2, r2\n\tshl\t@CPI0_7[0], r2, r3\n\tsub.s\t1, r0, r4\n\txor\tr3, r4, r3\n\tsub.s!\t255, r2, r5\n\tadd.le\tr3, r0, r4\n\tadd\tstack-[1], r0, r3\n\tand\t@CPI0_7[0], r3, r3\n\tshl\tr3, r2, r2\n\tadd.gt\tr0, r0, r2\n\tsload\tr1, r3\n\tand\tr4, r3, r3\n\tor\tr3, r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_50:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_62\n\tadd\tr0, r0, r6\n.BB0_52:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_52\n.BB0_62:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_24\n.BB0_23:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_24:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_20:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_60\n\tadd\tr0, r0, r6\n.BB0_22:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_22\n.BB0_60:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_23\n\tjump\t@.BB0_24\n.func_end0:\n\nstorage_array_index_access_contract_SimpleStorage_dyn:\n.func_begin1:\n\tsload\tr0, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB1_1\n\tadd\t@CPI1_2[0], r1, r1\n\tst.1\t0, r0\n\tadd\tr0, r0, r2\n\tret\n.BB1_1:\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__cxa_throw:\n.func_begin2:\n\trevert\n.func_end2:\n\n__farcall:\n.func_begin3:\n.tmp0:\n\tfar_call\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n__staticcall:\n.func_begin4:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3320945695\nCPI0_3:\n\t.cell 3320945696\nCPI0_4:\n\t.cell 3440069411\nCPI0_5:\n\t.cell 358838287\nCPI0_6:\n\t.cell 500852033\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell 2535301200456458802993406410752\nCPI0_9:\nCPI1_2:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_10:\n\t.cell 20984502704325237914344933049264441155999123699711991396613047579538033213440\nCPI0_11:\n\t.cell 316912652418240591808998408192\nCPI0_12:\n\t.cell 452317198919300933073470386276967706954939881782770849444038911677239621355\nCPI0_13:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_14:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_15:\n\t.cell 18446744073709551615\nCPI0_16:\nCPI1_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_17:\nCPI1_1:\n\t.cell 2852213850513516153367582212096\nCPI0_18:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_19:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_20:\n\t.cell 43576122634770472758325941782982599838796957244005075818703754470792663924736\nCPI0_21:\n\t.cell 18446744073709551616\n","bytecode":{"object":"00030000000000020001000000000002000000000301001900000060033002700000006203300197000200000031035500010000000103550000008004000039000000400040043f0000000102200190000000300000c13d000000040230008c0000011b0000413d000000000201043b000000e002200270000000640420009c000000380000213d000000670420009c000000550000613d000000680120009c0000011b0000c13d0000000001000416000000000101004b0000011b0000c13d0000006e01000041000000a40010043f00000000010004140000006f02000041000000800020043f000000840000043f0000006002000039000000c40020043f0000006202000041000000620310009c0000000001028019000000c00110021000000070011001c7000000e40000043f0000800602000039018101770000040f0000000102200190000000b60000613d000000000301043b000000000103004b000000e00000c13d00000002010003670000000002000031000000bb0000013d0000000001000416000000000101004b0000011b0000c13d0000002001000039000001000010044300000120000004430000006301000041000001820001042e000000650420009c000000980000613d000000660220009c0000011b0000c13d0000000002000416000000240330008c0000011b0000413d000000000202004b0000011b0000c13d0000000401100370000000000101043b000000000200041a000000000221004b0000011b0000813d018101690000040f0000000302200210000000000101041a000000000121022f0000006901100197000000ff0220008c0000000001002019000000400200043d00000000001204350000006201000041000000620320009c000000000201801900000040012002100000006a011001c7000001820001042e0000000002000416000000440330008c0000011b0000413d000000000202004b0000011b0000c13d0000000401100370000000000101043b000000000200041a000000000212004b000000b00000a13d00000000000004350000006b01100041000000000101041a000000740200004100000000002004390000006901100197000100000001001d000000040010044300000062010000410000000002000414000000620320009c0000000002018019000000c00120021000000075011001c700008002020000390181017c0000040f0000000102200190000000e90000613d000000000101043b000000000101004b0000011b0000613d000000400500043d0000007601000041000000000015043500000024010000390000000101100367000000000101043b0000000402500039000000000012043500000000010004140000000102000029000000040320008c000000930000613d0000006204000041000000620310009c0000000001048019000000620350009c00000000040540190000004003400210000000c001100210000000000131019f00000073011001c7000100000005001d018101770000040f000000010500002900000000030100190000006003300270000000620030019d000000620330019700020000000103550000000102200190000001590000613d000000770150009c000000e30000813d000000400050043f0000000001000019000001820001042e0000000002000416000000240330008c0000011b0000413d000000000202004b0000011b0000c13d0000000401100370000000000101043b000000000200041a000000000212004b000000b00000a13d00000000000004350000006b01100041000000000201041a0000006c01000041000000800010043f00000000010004140000006902200197000000040320008c000000ea0000c13d0000000003000031000000200130008c00000000040300190000002004008039000001150000013d000000720100004100000000001004350000003201000039000000040010043f00000073010000410000018300010430000200000001035500000000020100190000006002200270000000620020019d0000006202200197000000400300043d0000001f0420018f0000000505200272000000c80000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000c00000413d000000000604004b000000d70000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000006201000041000000620430009c0000000003018019000000620420009c000000000201801900000060012002100000004002300210000000000112019f0000018300010430000000000100041a000000710210009c000001220000a13d000000720100004100000000001004350000004101000039000000040010043f00000073010000410000018300010430000000000001042f0000006203000041000000620410009c0000000001038019000000c0011002100000006d011001c70181017c0000040f000000000301001900000060033002700000006203300197000000200430008c000000000403001900000020040080390000001f0540018f0000000506400272000001020000613d00000000070000190000000508700210000000000981034f000000000909043b000000800880003900000000009804350000000107700039000000000867004b000000fa0000413d000000000705004b000001110000613d0000000506600210000000000761034f00000003055002100000008006600039000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000000000003001f00020000000103550000000102200190000001360000613d0000001f01400039000000600110018f00000080011001bf000000400010043f000000200230008c0000011d0000813d00000000010000190000018300010430000000800200043d000000000021043500000040011002100000006a011001c7000001820001042e0000000102100039000000000020041b000100000003001d018101690000040f0000000302200210000000690320021f000000010400008a000000000343013f000000ff0520008c000000000403a0190000000103000029000000690330019700000000022301cf0000000002002019000000000301041a000000000334016f000000000223019f000000000021041b0000000001000019000001820001042e000000400200043d0000001f0430018f0000000505300272000001430000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b0000013b0000413d000000000604004b000001520000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000006201000041000000620420009c000000000201801900000040012002100000006002300210000000000121019f0000018300010430000000400200043d0000001f0430018f0000000505300272000001660000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b0000015e0000413d000000000604004b000001450000c13d000001520000013d000000000200041a000000000212004b000001700000a13d0000006b0110004100000000000004350000000002000019000000000001042d000000720100004100000000001004350000003201000039000000040010043f00000073010000410000018300010430000000000001042f0000017a002104210000000102000039000000000001042d0000000002000019000000000001042d0000017f002104230000000102000039000000000001042d0000000002000019000000000001042d0000018100000432000001820001042e0000018300010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000c5f19c1f00000000000000000000000000000000000000000000000000000000c5f19c2000000000000000000000000000000000000000000000000000000000cd0b4b23000000000000000000000000000000000000000000000000000000001563700f000000000000000000000000000000000000000000000000000000001dda6541000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000000000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5632e64cec1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000800000000000000000010000a15ce918ae1e78a5ff8c25c46924b02111e8f3b2b7d5864303af8b76eb9c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd0200000000000000000000000000000000000084000000800000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000002000000000000000000000000000000240000000000000000000000006057361d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000002d6002b23ad416d172ddb3e820cdd1312935defd8104b22174a923b45e8d9036"},"methodIdentifiers":{"ListOfSimpleStorageContracts(uint256)":"cd0b4b23","createSimpleStorageContract()":"1dda6541","sfGet(uint256)":"c5f19c20","sfStore(uint256,uint256)":"1563700f"}},"irOptimized":"/// @use-src 1:\"contracts/StorageFactory.sol\"\nobject \"StorageFactory_128\" {\n    code {\n        {\n            /// @src 1:127:933  \"contract StorageFactory{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"StorageFactory_128_deployed\")\n            codecopy(_1, dataoffset(\"StorageFactory_128_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 1:\"contracts/StorageFactory.sol\"\n    object \"StorageFactory_128_deployed\" {\n        code {\n            {\n                /// @src 1:127:933  \"contract StorageFactory{...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x1563700f {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _1) { revert(_3, _3) }\n                        /// @src 1:580:629  \"ListOfSimpleStorageContracts[_simpleStorageIndex]\"\n                        let _4, _5 := storage_array_index_access_contract_SimpleStorage_dyn(/** @src 1:127:933  \"contract StorageFactory{...\" */ calldataload(_2))\n                        let value := and(shr(shl(3, _5), sload(/** @src 1:580:629  \"ListOfSimpleStorageContracts[_simpleStorageIndex]\" */ _4)), /** @src 1:127:933  \"contract StorageFactory{...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        if iszero(extcodesize(value))\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        let _6 := /** @src 1:127:933  \"contract StorageFactory{...\" */ mload(_1)\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        mstore(_6, /** @src 1:127:933  \"contract StorageFactory{...\" */ shl(224, 0x6057361d))\n                        mstore(/** @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\" */ add(_6, /** @src 1:127:933  \"contract StorageFactory{...\" */ _2), calldataload(36))\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        let _7 := call(gas(), value, /** @src 1:127:933  \"contract StorageFactory{...\" */ _3, /** @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\" */ _6, /** @src 1:127:933  \"contract StorageFactory{...\" */ 36, /** @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\" */ _6, /** @src 1:127:933  \"contract StorageFactory{...\" */ _3)\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        if iszero(_7)\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            let pos := mload(_1)\n                            returndatacopy(pos, _3, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 1:639:685  \"mySimpleStorage.store(_newSimpleStorageNumber)\"\n                        if _7\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            if gt(_6, 0xffffffffffffffff)\n                            {\n                                mstore(_3, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(_3, 36)\n                            }\n                            mstore(_1, _6)\n                            _3 := _3\n                        }\n                        return(_3, _3)\n                    }\n                    case 0x1dda6541 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 1:316:335  \"new SimpleStorage()\"\n                        let _8 := /** @src 1:127:933  \"contract StorageFactory{...\" */ mload(_1)\n                        /// @src 1:316:335  \"new SimpleStorage()\"\n                        let _9 := datasize(\"SimpleStorage_58\")\n                        let _10 := add(_8, _9)\n                        if or(gt(_10, 0xffffffffffffffff), lt(_10, _8))\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 0x24)\n                        }\n                        /// @src 1:316:335  \"new SimpleStorage()\"\n                        datacopy(_8, dataoffset(\"SimpleStorage_58\"), _9)\n                        let expr_address := create(/** @src 1:127:933  \"contract StorageFactory{...\" */ _3, /** @src 1:316:335  \"new SimpleStorage()\" */ _8, sub(_10, _8))\n                        if iszero(expr_address)\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            let pos_1 := mload(_1)\n                            returndatacopy(pos_1, _3, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        let oldLen := sload(_3)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(_3, 0x24)\n                        }\n                        sstore(_3, add(oldLen, 1))\n                        let slot, offset := storage_array_index_access_contract_SimpleStorage_dyn(oldLen)\n                        let _11 := sub(shl(160, 1), 1)\n                        let _12 := sload(slot)\n                        let shiftBits := shl(3, offset)\n                        sstore(slot, or(and(_12, not(shl(shiftBits, _11))), shl(shiftBits, and(expr_address, _11))))\n                        return(_3, _3)\n                    }\n                    case 0xc5f19c20 {\n                        if callvalue() { revert(_3, _3) }\n                        let _13 := 32\n                        if slt(add(calldatasize(), not(3)), _13) { revert(_3, _3) }\n                        /// @src 1:821:870  \"ListOfSimpleStorageContracts[_simpleStorageIndex]\"\n                        let _14, _15 := storage_array_index_access_contract_SimpleStorage_dyn(/** @src 1:127:933  \"contract StorageFactory{...\" */ calldataload(_2))\n                        let _16 := sload(/** @src 1:821:870  \"ListOfSimpleStorageContracts[_simpleStorageIndex]\" */ _14)\n                        /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                        let _17 := /** @src 1:127:933  \"contract StorageFactory{...\" */ mload(_1)\n                        /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                        mstore(_17, /** @src 1:127:933  \"contract StorageFactory{...\" */ shl(224, 0x2e64cec1))\n                        /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                        let _18 := staticcall(gas(), /** @src 1:127:933  \"contract StorageFactory{...\" */ and(shr(shl(3, _15), _16), sub(shl(160, 1), 1)), /** @src 1:895:921  \"mySimpleStorage.retrieve()\" */ _17, /** @src 1:127:933  \"contract StorageFactory{...\" */ _2, /** @src 1:895:921  \"mySimpleStorage.retrieve()\" */ _17, /** @src 1:127:933  \"contract StorageFactory{...\" */ _13)\n                        /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                        if iszero(_18)\n                        {\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            let pos_2 := mload(_1)\n                            returndatacopy(pos_2, _3, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                        let expr := _3\n                        if _18\n                        {\n                            let _19 := /** @src 1:127:933  \"contract StorageFactory{...\" */ _13\n                            /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                            if gt(/** @src 1:127:933  \"contract StorageFactory{...\" */ _13, /** @src 1:895:921  \"mySimpleStorage.retrieve()\" */ returndatasize()) { _19 := returndatasize() }\n                            /// @src 1:127:933  \"contract StorageFactory{...\"\n                            let newFreePtr := add(_17, and(add(_19, 31), not(31)))\n                            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _17))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(_1, newFreePtr)\n                            if slt(sub(/** @src 1:895:921  \"mySimpleStorage.retrieve()\" */ add(_17, _19), /** @src 1:127:933  \"contract StorageFactory{...\" */ _17), _13) { revert(_3, _3) }\n                            /// @src 1:895:921  \"mySimpleStorage.retrieve()\"\n                            expr := /** @src 1:127:933  \"contract StorageFactory{...\" */ mload(_17)\n                        }\n                        let memPos := mload(_1)\n                        mstore(memPos, expr)\n                        return(memPos, _13)\n                    }\n                    case 0xcd0b4b23 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let value_1 := calldataload(_2)\n                        /// @src 1:157:208  \"SimpleStorage[] public ListOfSimpleStorageContracts\"\n                        if iszero(lt(value_1, /** @src 1:127:933  \"contract StorageFactory{...\" */ sload(_3)))\n                        /// @src 1:157:208  \"SimpleStorage[] public ListOfSimpleStorageContracts\"\n                        {\n                            revert(/** @src 1:127:933  \"contract StorageFactory{...\" */ _3, _3)\n                        }\n                        /// @src 1:157:208  \"SimpleStorage[] public ListOfSimpleStorageContracts\"\n                        let slot_1, offset_1 := storage_array_index_access_contract_SimpleStorage_dyn(value_1)\n                        /// @src 1:127:933  \"contract StorageFactory{...\"\n                        let _20 := sload(/** @src 1:157:208  \"SimpleStorage[] public ListOfSimpleStorageContracts\" */ slot_1)\n                        /// @src 1:127:933  \"contract StorageFactory{...\"\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, and(shr(shl(3, offset_1), _20), sub(shl(160, 1), 1)))\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function storage_array_index_access_contract_SimpleStorage_dyn(index) -> slot, offset\n            {\n                let _1 := 0\n                if iszero(lt(index, sload(_1)))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(_1, 0x24)\n                }\n                mstore(_1, _1)\n                slot := add(18569430475105882587588266137607568536673111973893317399460219858819262702947, index)\n                offset := _1\n            }\n        }\n        /// @use-src 0:\"contracts/SimpleStorage.sol\"\n        object \"SimpleStorage_58\" {\n            code {\n                {\n                    /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"SimpleStorage_58_deployed\")\n                    codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 0:\"contracts/SimpleStorage.sol\"\n            object \"SimpleStorage_58_deployed\" {\n                code {\n                    {\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x2e64cec1 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                mstore(_1, sload(_4))\n                                return(_1, 32)\n                            }\n                            case 0x2ebce631 {\n                                if callvalue() { revert(_4, _4) }\n                                let _5 := 32\n                                if slt(add(calldatasize(), not(3)), _5) { revert(_4, _4) }\n                                let value := calldataload(_3)\n                                let _6 := 1\n                                /// @src 0:241:270  \"Person [] public listOfPeople\"\n                                if iszero(lt(value, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ sload(1)))\n                                /// @src 0:241:270  \"Person [] public listOfPeople\"\n                                {\n                                    revert(/** @src 0:58:1264  \"contract SimpleStorage{...\" */ _4, _4)\n                                }\n                                /// @src 0:241:270  \"Person [] public listOfPeople\"\n                                let slot, offset := storage_array_index_access_struct_Person__dyn(value)\n                                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                                let _7 := sload(/** @src 0:241:270  \"Person [] public listOfPeople\" */ slot)\n                                let _8 := add(slot, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ 1)\n                                let memPtr := mload(_2)\n                                let ret := _4\n                                let slotValue := sload(_8)\n                                let length := extract_byte_array_length(slotValue)\n                                mstore(memPtr, length)\n                                let updated_pos := add(memPtr, _5)\n                                switch and(slotValue, 1)\n                                case 0 {\n                                    mstore(updated_pos, and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _5)\n                                }\n                                case 1 {\n                                    mstore(_4, _8)\n                                    let dataPos := keccak256(_4, _5)\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _5) }\n                                    {\n                                        mstore(add(add(memPtr, i), _5), sload(dataPos))\n                                        dataPos := add(dataPos, _6)\n                                    }\n                                    ret := add(add(memPtr, i), _5)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                                let memPos := mload(_2)\n                                mstore(memPos, _7)\n                                mstore(add(memPos, _5), _2)\n                                let length_1 := mload(memPtr)\n                                mstore(add(memPos, _2), length_1)\n                                copy_memory_to_memory_with_cleanup(updated_pos, add(memPos, 96), length_1)\n                                return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), 96))\n                            }\n                            case 0x6057361d {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                sstore(_4, calldataload(_3))\n                                return(_4, _4)\n                            }\n                            case 0x6f760f41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let offset_1 := calldataload(_3)\n                                let _9 := 0xffffffffffffffff\n                                if gt(offset_1, _9) { revert(_4, _4) }\n                                let value0 := abi_decode_string(add(_3, offset_1), calldatasize())\n                                let value_1 := calldataload(36)\n                                let memPtr_1 := mload(_2)\n                                let newFreePtr := add(memPtr_1, _2)\n                                if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr_1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                mstore(_2, newFreePtr)\n                                mstore(memPtr_1, value_1)\n                                let _10 := 32\n                                /// @src 0:1167:1196  \"Person(_favoriteNumber,_name)\"\n                                let _11 := add(memPtr_1, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ _10)\n                                mstore(_11, value0)\n                                let _12 := 1\n                                let oldLen := sload(_12)\n                                if iszero(lt(oldLen, 18446744073709551616))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                sstore(_12, add(oldLen, _12))\n                                let slot_1, offset_2 := storage_array_index_access_struct_Person__dyn(oldLen)\n                                if offset_2\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, _4)\n                                    revert(_4, 36)\n                                }\n                                sstore(slot_1, mload(memPtr_1))\n                                let memberSlot := add(slot_1, _12)\n                                let _13 := mload(_11)\n                                let newLen := mload(_13)\n                                if gt(newLen, _9)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 36)\n                                }\n                                let _14 := extract_byte_array_length(sload(memberSlot))\n                                if gt(_14, 31)\n                                {\n                                    mstore(_4, memberSlot)\n                                    let data := keccak256(_4, _10)\n                                    let deleteStart := add(data, shr(5, add(newLen, 31)))\n                                    if lt(newLen, _10) { deleteStart := data }\n                                    let _15 := add(data, shr(5, add(_14, 31)))\n                                    let start := deleteStart\n                                    for { } lt(start, _15) { start := add(start, _12) }\n                                    { sstore(start, _4) }\n                                }\n                                let srcOffset := _4\n                                srcOffset := _10\n                                switch gt(newLen, 31)\n                                case 1 {\n                                    let loopEnd := and(newLen, not(31))\n                                    mstore(_4, memberSlot)\n                                    let dstPtr := keccak256(_4, _10)\n                                    let i_1 := _4\n                                    for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                                    {\n                                        sstore(dstPtr, mload(add(_13, srcOffset)))\n                                        dstPtr := add(dstPtr, _12)\n                                        srcOffset := add(srcOffset, _10)\n                                    }\n                                    if lt(loopEnd, newLen)\n                                    {\n                                        let lastValue := mload(add(_13, srcOffset))\n                                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                    }\n                                    sstore(memberSlot, add(shl(_12, newLen), _12))\n                                }\n                                default {\n                                    let value_2 := _4\n                                    if newLen\n                                    {\n                                        value_2 := mload(add(_13, srcOffset))\n                                    }\n                                    sstore(memberSlot, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                                }\n                                let pos := mload(_2)\n                                let length_2 := mload(value0)\n                                copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_2)\n                                let end := add(pos, length_2)\n                                mstore(end, /** @src 0:1207:1227  \"nameToFavoriteNumber\" */ 0x02)\n                                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                                sstore(keccak256(pos, add(sub(end, pos), _10)), value_1)\n                                return(_4, _4)\n                            }\n                            case 0x8bab8dd5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let offset_3 := calldataload(_3)\n                                if gt(offset_3, 0xffffffffffffffff) { revert(_4, _4) }\n                                let value0_1 := abi_decode_string(add(_3, offset_3), calldatasize())\n                                let pos_1 := mload(_2)\n                                let length_3 := mload(value0_1)\n                                copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_3)\n                                let end_1 := add(pos_1, length_3)\n                                mstore(end_1, /** @src 0:692:746  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                                /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                                let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _16)\n                                return(memPos_1, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n                    {\n                        if iszero(lt(index, sload(/** @src 0:241:270  \"Person [] public listOfPeople\" */ 1)))\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x32)\n                            revert(0, 0x24)\n                        }\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:241:270  \"Person [] public listOfPeople\" */ 1)\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:241:270  \"Person [] public listOfPeople\" */ 1, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ index))\n                        offset := /** @src -1:-1:-1 */ 0\n                    }\n                    /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := shr(1, data)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 32) }\n                        {\n                            mstore(add(dst, i), mload(add(src, i)))\n                        }\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_decode_string(offset, end) -> array\n                    {\n                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                        let _1 := calldataload(offset)\n                        if gt(_1, 0xffffffffffffffff)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1264  \"contract SimpleStorage{...\" */ 0x24)\n                        }\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                        mstore(memPtr, _1)\n                        if gt(add(add(offset, _1), 0x20), end)\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                        mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                        /// @src 0:58:1264  \"contract SimpleStorage{...\"\n                        array := memPtr\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220dc49d4d04578b4b2d39b3360688c45e4fa3501164b21781aa90dcd9d7c8b138364736f6c63430008180033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220fb683b0c4b948d68c630925244c324db60d341a2f986fc7da04358daf13e4e9c64736f6c63430008180033\"\n    }\n}\n","hash":"0100007978e7c86daf3f83bb11b430f2f38d7ec3dbc47ea2ca5074888a4c193c","factoryDependencies":{"010000a15ce918ae1e78a5ff8c25c46924b02111e8f3b2b7d5864303af8b76eb":"contracts/SimpleStorage.sol:SimpleStorage"}}}}}}